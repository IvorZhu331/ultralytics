# Ultralytics YOLO üöÄ, AGPL-3.0 license
# Publish pip package to PyPI https://pypi.org/project/ultralytics/ and Docs to https://docs.ultralytics.com

name: Publish to PyPI and Deploy Docs

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      pypi:
        type: boolean
        description: Publish to PyPI
      docs:
        type: boolean
        description: Deploy Docs

jobs:
  publish:
    if: github.repository == 'IvorZhu331/ultralytics'
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0" # pulls all commits (needed correct last updated dates in Docs)
      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip" # caching pip dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel build twine
          pip install -e ".[dev]" --extra-index-url https://download.pytorch.org/whl/cpu
      - name: Check PyPI version
        shell: python
        run: |
          import os
          import ultralytics
          from ultralytics.utils.checks import check_latest_pypi_version

          v_local = tuple(map(int, ultralytics.__version__.split('.')))
          v_pypi = tuple(map(int, check_latest_pypi_version().split('.')))

          print(f'Local version is {v_local}')
          print(f'PyPI version is {v_pypi}')

          d = [a - b for a, b in zip(v_local, v_pypi)]  # diff

          increment_patch = (d[0] == d[1] == 0) and (0 < d[2] < 3)  # publish if patch version increments by 1 or 2
          increment_minor = (d[0] == 0) and (d[1] == 1) and v_local[2] == 0  # publish if minor version increments

          increment = increment_patch or increment_minor

          os.system(f'echo "increment={increment}" >> $GITHUB_OUTPUT')
          os.system(f'echo "version={ultralytics.__version__}" >> $GITHUB_OUTPUT')

          if increment:
              print('Local version is higher than PyPI version. Publishing new version to PyPI ‚úÖ.')
        id: check_pypi
      - name: Publish to PyPI
        continue-on-error: true
        if: (github.event_name == 'push' || github.event.inputs.pypi == 'true')  && steps.check_pypi.outputs.increment == 'True'
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m build
          python -m twine upload dist/* -u __token__ -p $PYPI_TOKEN
      - name: Deploy Docs
        continue-on-error: true
        if: (github.event_name == 'push' || github.event.inputs.docs == 'true') && github.repository == 'ultralytics/ultralytics' && github.actor == 'glenn-jocher'
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          INDEXNOW_KEY: ${{ secrets.INDEXNOW_KEY_DOCS }}
        run: |
          export JUPYTER_PLATFORM_DIRS=1
          python docs/build_docs.py
          git config --global user.name "Glenn Jocher"
          git config --global user.email "glenn.jocher@ultralytics.com"
          git clone https://github.com/ultralytics/docs.git docs-repo
          cd docs-repo
          git checkout gh-pages || git checkout -b gh-pages
          rm -rf *
          cp -R ../site/* .
          echo "$INDEXNOW_KEY" > "$INDEXNOW_KEY.txt"
          git add .
          LATEST_HASH=$(git rev-parse --short=7 HEAD)
          git commit -m "Update Docs for 'ultralytics ${{ steps.check_pypi.outputs.version }} - $LATEST_HASH'"
          git push https://$PERSONAL_ACCESS_TOKEN@github.com/ultralytics/docs.git gh-pages
      - name: Generate Changelog Summary
        # if: steps.check_pypi.outputs.increment == 'True'
        env:
          AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the diff for the PR

          PR_NUMBER=${{ env.PR_NUMBER }}
          
          DIFF=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://patch-diff.githubusercontent.com/raw/${{ github.repository }}/pull/$PR_NUMBER.diff")
          
          echo "$DIFF"

          AZURE_OPENAI_ENDPOINT="https://ivor-zhu.openai.azure.com/openai/deployments/my-gpt35-model/chat/completions?api-version=2023-05-15"
          
          # Generate summary using Azure OpenAI API
          API_RESPONSE=$(curl -s "$AZURE_OPENAI_ENDPOINT" \
            -H "Content-Type: application/json" \
            -H "api-key: $AZURE_API_KEY" \
            -d '{
              "messages": [
                {
                  "role": "system",
                  "content": "You are a helpful assistant."
                },
                {
                  "role": "user",
                  "content": "Summarize the following git diff in a concise manner, focusing on the key changes and their impact:\n\n'"$DIFF"'"
                }
              ]
            }')

          # Print the entire API response for debugging
          echo "API Response: $API_RESPONSE"

          SUMMARY=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content')
      
          echo "Summary: $SUMMARY"
      
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.check_pypi.outputs.version }}"
          RELEASE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" $RELEASE_URL)

          # Check if the release exists
          if echo "$RELEASE_RESPONSE" | jq -e '.message' | grep -q "Not Found"; then
            # Create a new release with the generated summary
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d @- https://api.github.com/repos/${{ github.repository }}/releases << EOF
          {
            "tag_name": "${{ steps.check_pypi.outputs.version }}",
            "name": "Release ${{ steps.check_pypi.outputs.version }}",
            "body": "- ${SUMMARY}"
          }
          EOF
          else
            # Append the summary to the existing release notes
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
            EXISTING_BODY=$(echo "$RELEASE_RESPONSE" | jq -r '.body')

            UPDATED_BODY="${EXISTING_BODY}\n- ${SUMMARY}"

            curl -s -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d @- https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID} << EOF
          {
            "body": "${UPDATED_BODY}"
          }
          EOF
          fi
      - name: Notify on Slack (Success)
        if: success() && github.event_name == 'push' && steps.check_pypi.outputs.increment == 'True'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {"text": "<!channel> GitHub Actions success for ${{ github.workflow }} ‚úÖ\n\n\n*Repository:* https://github.com/${{ github.repository }}\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Author:* ${{ github.actor }}\n*Event:* NEW 'ultralytics ${{ steps.check_pypi.outputs.version }}' pip package published üòÉ\n*Job Status:* ${{ job.status }}\n*Pull Request:* <https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}> ${{ env.PR_TITLE }}\n"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_YOLO }}
      - name: Notify on Slack (Failure)
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {"text": "<!channel> GitHub Actions error for ${{ github.workflow }} ‚ùå\n\n\n*Repository:* https://github.com/${{ github.repository }}\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Author:* ${{ github.actor }}\n*Event:* ${{ github.event_name }}\n*Job Status:* ${{ job.status }}\n*Pull Request:* <https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}> ${{ env.PR_TITLE }}\n"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_YOLO }}
